package myMarvelcardgamepack;


/**
 * Designer: Timothy Landers
 * Date: 28/10/22
 * Filename: RandomExtend
 * Purpose: To allow a hero to Extend random effects on an enemy.
 */
import java.util.ArrayList; 
class ExtendRandom extends AfterAbility
{
    String[] effname; 
    String[] efftype;
    int chance; 
    int max; int available=0; //how many effects the ability can extend, before and after checking the chance, respectively
    boolean together; //true for together and false for separate
    public ExtendRandom (int echance, int num, String[] ename, String[] etype, boolean tog)
    {
        chance=echance; effname=ename; efftype=etype; together=tog; max=num;
    }
    @Override
    public void Use (Character user, Character target, int ignoreme)
    {
        boolean succeed=false;  
        ArrayList<StatEff> removal= new ArrayList<StatEff>();
        if (!(target.immunities.contains("Extend"))&&!(target.immunities.contains("Other"))&&target.effects.size()>0) 
        {
            if (together==true) //the application chance is rolled once for all the effects
            {
                succeed=Card_CoinFlip.Flip(chance+user.Cchance);
                if (succeed==false)
                {
                    System.out.println (user.Cname+"'s Extend failed to apply due to chance."); //(Test) The application chance was "+chance);
                }
                else
                {
                    available=max;
                }
            }
            else if (together==false) //chance calculated separately
            {
                for (int i=0; i<max; i++)
                {
                  succeed=Card_CoinFlip.Flip(chance+user.Cchance);
                  if (succeed==true)
                  {
                      ++available;
                  }
                }
                if (available<=0)
                {
                    System.out.println (user.Cname+"'s Extend failed to apply due to chance."); //(Test) The application chance was "+chance);
                }
            }   
            if (available>0&&(target.CheckFor(target,effname[0])==true)||target.CheckFor(target.effname[1]))
            {
                for (int i=0; i<available; i++)
                {
                    target.GetRandomStatEff(target, 
                }
            }
            //delete everything below 
                  if (!(buffname[i].equalsIgnoreCase("all"))) //nullify specific buffs on the target, e.g. Counter
                  {
                     for (StatEff eff: target.effects)
                     {
                        if (eff.getefftype().equalsIgnoreCase("Buffs")&&eff.geteffname().equalsIgnoreCase(buffname[i]))
                        {
                            succeed=Card_CoinFlip.Flip(chance+user.Cchance);
                            if (succeed==true)
                            {
                                removal.add(eff); //stores which effects will be removed
                            }
                        }
                     }   
                   }
                  else //extend anything
                  {
                     for (StatEff eff: target.effects)
                     {
                        if (eff.getefftype().equalsIgnoreCase(efftype[i]))
                        {
                            succeed=Card_CoinFlip.Flip(chance+user.Cchance);
                            if (succeed==true)
                            {
                                removal.add(eff); //stores which effects will be removed
                            }
                        }
                     }   
                   }
                }                    
            }
        }
        if (removal.size()>0) //then choose which to remove
        {
            System.out.println (user.Cname+", choose a buff to Nullify from "+target.Cname+".");
            System.out.println ("Enter the number next to it, not its name."); 
            boolean falg=false; int counter=0; int removeme=616;
            for (StatEff eff: removal)
            {
               int o=counter+1;  
               System.out.println(o+": "+eff.geteffname());
               ++counter;
            }            
            for (int i=0; i<available; i++)
            {
                do
                {
                    removeme=Damage_Stuff.GetInput();
                    --removeme;
                    if (removeme>=0&&removeme<removal.size())
                    {
                        falg=true;
                    }
                }
                while (falg==false);
                StatEff gone= removal.get(removeme);
                System.out.println(target.Cname+"'s "+gone.geteffname()+" was Nullified!");
                target.remove(target, gone.getcode());                        
            }
            --available;
        }
        return 0;
    }
}
