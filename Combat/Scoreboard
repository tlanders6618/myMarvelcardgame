package myMarvelcardgamepack;


/**
 * Designer: Timothy Landers
 * Date: 12/8/22
 * Filename: Scoreboard
 * Purpose: To display characters' status.
 */
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.awt.*;
public class Scoreboard
{    
    static JFrame frame;
    static JPanel Panel;
    static JTable table11; //for player 1's first 3 characters    
    static JTable table12; //for player 1's second set of 3 characters
    static JTable table21; 
    static JTable table22;
    public static void main (Character[] team1, Character[] team2)
    {                  
        //The frame is the GUI itself; the window that displays everything
        frame = new JFrame("Battle Progress");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //try hide on close
        //Create a content pane to hold tables
        Panel = new JPanel(new BorderLayout());
        //Add content pane to frame 
        frame.add(Panel); 
        //Column and row names and information for tables
        String row11[][]; String column11[]; //for player 1's heroes
        String row12[][]; String column12[]; 
        String row21[][]; String column21[]; //for player 2's heroes
        String row22[][]; String column22[];
        //Get the information
        row11=GetRows(team1, true); column11=GetColumns(team1, true);        
        row21=GetRows(team2, true); column21=GetColumns(team2, true);
        //Make tables 
        table11=new JTable(row11,column11);  
        table21=new JTable(row21,column21); 
        //Make the tables' first column a set size since it doesn't need much space
        table11.getColumnModel().getColumn(0).setMinWidth(90); table11.getColumnModel().getColumn(0).setMaxWidth(90);
        table21.getColumnModel().getColumn(0).setMinWidth(90); table21.getColumnModel().getColumn(0).setMaxWidth(90);
        //Make tables uneditable
        table11.setEnabled(false);
        table21.setEnabled(false);
        //Put tables onto scrollpanes
        JScrollPane Scroll11 = new JScrollPane(table11); 
        JScrollPane Scroll21 = new JScrollPane(table21);         
        //Set scrollpane locations
        Panel.add(Scroll11, BorderLayout.WEST);
        Panel.add(Scroll21, BorderLayout.EAST);  
        //make a second table if needed; there are three heroes max per table so the display is readable
        if (Battle.p1heroes>3) 
        {
            row12=GetRows(team1, false); column12=GetColumns(team1, false);
            table12=new JTable(row12, column12);
            table12.getColumnModel().getColumn(0).setMinWidth(90); table11.getColumnModel().getColumn(0).setMaxWidth(90);
            table12.setEnabled(false);
            JScrollPane Scroll12 = new JScrollPane(table12); 
            Panel.add (Scroll12, BorderLayout.WEST);
            Scroll12.setPreferredSize(new Dimension(675,200));     
        }
        if (Battle.p2heroes>3)
        {
            row22=GetRows(team2, false); column22=GetColumns(team2, false);
            table22= new JTable(row22, column22); 
            table22.getColumnModel().getColumn(0).setMinWidth(90); table21.getColumnModel().getColumn(0).setMaxWidth(90);
            table22.setEnabled(false);
            JScrollPane Scroll22 = new JScrollPane(table22); 
            Panel.add(Scroll22, BorderLayout.EAST);
            Scroll22.setPreferredSize(new Dimension(675,200));     
        }
        //Set scrollpane sizes
        Scroll11.setPreferredSize(new Dimension(675,200));     
        Scroll21.setPreferredSize(new Dimension(675,200)); 
        
        //Size the frame 
        frame.setSize(1050,500); //width and then height; this must be done last or the GUI will not show
        frame.pack();
        frame.setVisible(true);
    }
    public static void UpdateScore (Character[] team1, Character[] team2)
    {
        frame.setVisible(false); 
        String[][] newrow11=GetRows(team1, true);
        String[][] newrow21=GetRows(team2, true);         
        String newcolumn11[]=GetColumns(team1, true);     
        String newcolumn21[]=GetColumns(team2, true);
        table11.setModel(new DefaultTableModel (newrow11, newcolumn11));
        table21.setModel(new DefaultTableModel (newrow21, newcolumn21));        
        table11.getColumnModel().getColumn(0).setMinWidth(90); table11.getColumnModel().getColumn(0).setMaxWidth(90);
        table21.getColumnModel().getColumn(0).setMinWidth(90); table21.getColumnModel().getColumn(0).setMaxWidth(90);
        if (Battle.p1heroes>3)
        {
            String[][] newrow12=GetRows(team1, false);
            String[] newcolumn12=GetColumns(team1, false);
            table12.setModel(new DefaultTableModel (newrow12, newcolumn12));
            table12.getColumnModel().getColumn(0).setMinWidth(90); table12.getColumnModel().getColumn(0).setMaxWidth(90);
        }
        else if (table12!=null) //get rid of the table because the extra heroes have died
        {
            table12.setModel(new DefaultTableModel());
        }
        if (Battle.p2heroes>3)
        {
            String[][] newrow22=GetRows(team2, false);
            String[] newcolumn22=GetColumns(team2, false);
            table22.setModel(new DefaultTableModel (newrow22, newcolumn22));
            table22.getColumnModel().getColumn(0).setMinWidth(90); table22.getColumnModel().getColumn(0).setMaxWidth(90);
        }
        else if (table22!=null)
        {
            table22.setModel(new DefaultTableModel());
        }
        frame.setVisible(true); 
    }
    public static String[][] GetRows (Character[] champs, boolean halftocheck) //check first 3 team members or last 3, since it's 3 per table
    {
        //first row is team, second is health, third for shield, everything else is stateff
        //format is row then column
        int max=1; ArrayList <String> manywords= new ArrayList<String>(); int length=champs.length;
        if (halftocheck==true)
        {
            for (int i=0; i<3; i++)
            {
                if (champs[i]!=null&&champs[i].effects.size()>max)
                {
                    max=champs[i].effects.size(); //no more rows than there are status effects
                }
            } 
        }
        else
        {
            for (int i=3; i<6; i++)
            {
                if (champs[i]!=null&&champs[i].effects.size()>max)
                {
                    max=champs[i].effects.size(); //no more rows than there are status effects
                }
            } 
        }
        max+=3; //to make space for the team and shield and health
        String[][] words=new String[max][length+1]; //since there's an extra column listing what each row is for
        int counter=1; 
        words[0][0]="Team"; words[1][0]="Health"; words[2][0]="Shield"; words[3][0]="Status effects";
        if (halftocheck==true)
        {
            for (int i=0; i<3; i++)
            {
                if (champs[i]!=null&&champs[i].team1==true)
                {
                    words[0][counter]="Team 1"; 
                }
                else
                {
                    words[0][counter]="Team 2";
                }
                ++counter; 
            }
        }
        else
        {
            for (int i=3; i<6; i++)
            {
                if (champs[i]!=null&&champs[i].team1==true)
                {
                    words[0][counter]="Team 1"; 
                }
                else
                {
                    words[0][counter]="Team 2";
                }
                ++counter; 
            }
        }
        counter=1;
        if (halftocheck==true)
        {
            for (int i=0; i<3; i++)
            {
                if (champs[i]!=null)
                {
                    words[1][counter]=champs[i].GetHP(champs[i]);
                    ++counter;
                }
            }
        }
        else
        {
            for (int i=3; i<6; i++)
            {
                if (champs[i]!=null)
                {
                    words[1][counter]=champs[i].GetHP(champs[i]);
                    ++counter;
                }
            }
        }
        counter=1; 
        if (halftocheck==true)
        {
            for (int i=0; i<3; i++)
            {
                if (champs[i]!=null)
                {
                    words[2][counter]=champs[i].GetShield(champs[i]);
                    ++counter;
                }
            }
        }
        else
        {
            for (int i=3; i<6; i++)
            {
                if (champs[i]!=null)
                {
                    words[2][counter]=champs[i].GetShield(champs[i]);
                    ++counter;
                }
            }
        }
        counter=1; int statcount=3;
        if (halftocheck==true)
        {
            for (int i=0; i<3; i++)
            {
                if (champs[i]!=null)
                {
                    for (StatEff eff: champs[i].effects)
                    {
                        words[statcount][counter]=eff.geteffname();
                        ++statcount;
                    }
                }
                statcount=3; ++counter;
            }
        }
        else
        {
            for (int i=3; i<6; i++)
            {
                if (champs[i]!=null)
                {
                    for (StatEff eff: champs[i].effects)
                    {
                        words[statcount][counter]=eff.geteffname();
                        ++statcount;
                    }
                }
                statcount=3; ++counter;
            }
        }
        return words;
    }
    public static String[] GetColumns (Character[] champs, boolean halftocheck)
    {
        //column titles are just the heroes' names
        ArrayList <String> words= new ArrayList<String>(); int index=1; //the first row is the description
        words.add("Name");
        if (halftocheck==true)
        {
            for (int i=0; i<3; i++)
            {
                if (champs[i]!=null)
                {
                    String name=champs[i].Cname;
                    words.add(name);
                    ++index;
                }            
            }
        }
        else
        {
            for (int i=3; i<6; i++)
            {
                if (champs[i]!=null)
                {
                    String name=champs[i].Cname;
                    words.add(name);
                    ++index;
                }            
            }
        }
        String[] Titles= new String[index]; int counter=0;
        for (String str: words) //convert arraylist to array
        {
            Titles[counter]=str;
            ++counter;
        }
        return Titles;
    }    
}
